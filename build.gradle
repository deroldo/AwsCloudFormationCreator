buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "jacoco"
apply plugin: 'com.github.kt3k.coveralls'

mainClassName = 'br.com.deroldo.aws.Main'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    jacksonDataformatYamlVersion = '2.9.4'
    jacksonDatabindVersion = '2.9.4'
    commonsLang3Version = '3.7'
    gsonVersion = '2.8.2'
    junitVersion = '4.12'
}

dependencies {
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDataformatYamlVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "com.google.code.gson:gson:${gsonVersion}"

    testCompile "junit:junit:${junitVersion}"
}

jar {
    baseName = project.name + '-all'
    manifest {
        attributes(
            'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
            'Main-Class': mainClassName
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination "${buildDir}/jacocoHtml"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                minimum = 0.90
            }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'METHOD'
                minimum = 0.90
            }
        }
    }
}

build.finalizedBy(jacocoTestCoverageVerification)
jacocoTestCoverageVerification.finalizedBy(jacocoTestReport)