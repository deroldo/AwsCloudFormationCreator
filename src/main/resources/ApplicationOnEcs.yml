#-----------------------
#-----------------------
Parameters:
  #-----------------------
  Environment:
    Type: String
  #-----------------------
  DeployMinHealthPercent:
    Type: Number
    Default: 50
  #-----------------------
  DeployMaxHealthPercent:
    Type: Number
    Default: 100
  #-----------------------
  ContainerMemoryReservation:
    Type: String
    Default: '512'
  #-----------------------
  DesiredInstancesCount:
    Type: Number
    Default: 1
  #-----------------------
  ApiContainerPort:
    Type: String
  #-----------------------
  ApplicationName:
    Type: String
  #-----------------------
  ApplicationImage:
    Type: String
  #-----------------------
  HealthCheckPath:
    Type: String
    Default: '/health'
  #-----------------------
  VpcArn:
    Type: String
  #-----------------------
  HttpListenerArn:
    Type: String
  #-----------------------
  HttpsListenerArn:
    Type: String
  #-----------------------
  ListenerPriority:
    Type: String
  #-----------------------
  ListenerPath:
    Type: String
  #-----------------------
  HttpsListenerArn:
    Type: String
    Default: ''


#-----------------------
#-----------------------
Mappings:
  ContainerEnvironments:
    ContainerEnvironments:
      ContainerEnvironments:
        - Name: Origin
          Value: Template Auto Generated


#-----------------------
#-----------------------
Conditions:
  #-----------------------
  UseLoadBalancer:
    Fn::Not:
      - Fn::Equals:
          - Ref: HttpListenerArn
          - ''
  #-----------------------
  HttpsEnabled:
    Fn::Not:
      - Fn::Equals:
          - Ref: HttpsListenerArn
          - ''
  #-----------------------
  CreateHttpsListenerRule:
    Fn::And:
      - Condition: UseLoadBalancer
      - Condition: HttpsEnabled


#-----------------------
#-----------------------
Resources:
  #-----------------------
  ServiceDefinition:
    Type: "AWS::ECS::Service"
    DependsOn: HttpListenerRule
    Properties: 
      Cluster:
        Ref: Environment
      DeploymentConfiguration:
        MinimumHealthyPercent:
          Ref: DeployMinHealthPercent
        MaximumPercent:
          Ref: DeployMaxHealthPercent
      DesiredCount:
        Ref: DesiredInstancesCount
      LoadBalancers:
        Fn::If:
          - UseLoadBalancer
          - - TargetGroupArn:
                Ref: TargetGroup
              ContainerPort:
                Ref: ApiContainerPort
              ContainerName:
                Ref: ApplicationName
          - Ref: "AWS::NoValue"
      ServiceName:
        Ref: ApplicationName
      TaskDefinition:
        Ref: TaskDefinition
  #-----------------------
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties: 
      Family:
        Ref: ApplicationName
      ContainerDefinitions:
        - Name:
            Ref: ApplicationName
          Image:
            Ref: ApplicationImage
          MemoryReservation:
            Ref: ContainerMemoryReservation
          PortMappings:
            Fn::If:
              - UseLoadBalancer
              - - HostPort: 0
                  ContainerPort:
                    Ref: ApiContainerPort
              - Ref: "AWS::NoValue"
          Environment:
            Fn::FindInMap: [ "ContainerEnvironments", "ContainerEnvironments", "ContainerEnvironments"]
  #-----------------------
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: UseLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath:
        Ref: HealthCheckPath
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name:
        Fn::Join:
          - '-'
          - - Ref: Environment
            - Ref: ApplicationName
            - 'TG'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      VpcId:
        Ref: VpcArn
      Tags:
        - Key: "Environment"
          Value:
            Ref: Environment
  #-----------------------
  HttpListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Condition: UseLoadBalancer
    Properties:
      ListenerArn:
        Ref: HttpListenerArn
      Priority:
        Ref: ListenerPriority
      Conditions:
        - Field: "path-pattern"
          Values:
            - Ref: ListenerPath
      Actions:
        - Type: "forward"
          TargetGroupArn:
            Ref: TargetGroup
  #-----------------------
  HttpsListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Condition: CreateHttpsListenerRule
    Properties:
      ListenerArn:
        Ref: HttpsListenerArn
      Priority:
        Ref: ListenerPriority
      Conditions:
        - Field: "path-pattern"
          Values:
            - Ref: ListenerPath
      Actions:
        - Type: "forward"
          TargetGroupArn:
            Ref: TargetGroup