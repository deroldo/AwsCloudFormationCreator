---
Resources:
  MyAppVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
      - Key: "Name"
        Value:
          Fn::Join:
          - "-"
          - - "my-env"
            - "VPC"
      CidrBlock: "10.1.0.0/16"
  MyAppEcsInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Join:
        - "-"
        - - "my-env"
          - "EcsRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "ec2.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
      - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
  MyAppSSHLocalRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        Fn::Join:
        - "-"
        - - "my-env"
          - "EcsPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "iam:ListUsers"
          - "iam:GetGroup"
          Resource: "*"
        - Effect: "Allow"
          Action:
          - "iam:ListSSHPublicKeys"
          - "iam:GetSSHPublicKey"
          Resource:
            Fn::Sub: "arn:aws:iam::${AWS::AccountId}:user/*"
        - Effect: "Allow"
          Action: "ec2:DescribeTags"
          Resource: "*"
      Roles:
      - Ref: "MyAppEcsInstanceRole"
  MyAppEcsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName:
        Fn::Join:
        - "-"
        - - "my-env"
          - "EcsProfile"
      Roles:
      - Ref: "MyAppEcsInstanceRole"
  MyAppEcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "my-env"
  MyAppPubSubnetAz1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "MyAppVpc"
      AvailabilityZone:
        Fn::Select:
        - 0
        - - "us-east-1a"
          - "us-east-1c"
      MapPublicIpOnLaunch: true
      CidrBlock: "10.1.0.0/24"
  MyAppPrivSubnetAz2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "MyAppVpc"
      AvailabilityZone:
        Fn::Select:
        - 0
        - - "us-east-1a"
          - "us-east-1c"
      MapPublicIpOnLaunch: false
      CidrBlock: "10.1.1.0/24"
  MyAppPubSubnetAz3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "MyAppVpc"
      AvailabilityZone:
        Fn::Select:
        - 1
        - - "us-east-1a"
          - "us-east-1c"
      MapPublicIpOnLaunch: true
      CidrBlock: "10.1.2.0/24"
  MyAppPrivSubnetAz4:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "MyAppVpc"
      AvailabilityZone:
        Fn::Select:
        - 1
        - - "us-east-1a"
          - "us-east-1c"
      MapPublicIpOnLaunch: false
      CidrBlock: "10.1.3.0/24"
  MyAppInternetGateway:
    Type: "AWS::EC2::InternetGateway"
  MyAppAttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "MyAppVpc"
      InternetGatewayId:
        Ref: "MyAppInternetGateway"
  MyAppRouteViaIgw:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "MyAppVpc"
  MyAppPublicRouteViaIgw:
    Type: "AWS::EC2::Route"
    DependsOn: "MyAppAttachGateway"
    Properties:
      RouteTableId:
        Ref: "MyAppRouteViaIgw"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "MyAppInternetGateway"
  MyAppPubSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "MyAppPubSubnetAz1"
      RouteTableId:
        Ref: "MyAppRouteViaIgw"
  MyAppPrivSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "MyAppPrivSubnetAz2"
      RouteTableId:
        Ref: "MyAppRouteViaIgw"
  MyAppPubSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "MyAppPubSubnetAz3"
      RouteTableId:
        Ref: "MyAppRouteViaIgw"
  MyAppPrivSubnet4RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "MyAppPrivSubnetAz4"
      RouteTableId:
        Ref: "MyAppRouteViaIgw"
  MyAppEcsInstanceLc:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Ref: "MyAppEcsInstanceProfile"
      KeyName:
        Fn::If:
        - "MyAppCreateEC2LCWithKeyPair"
        - ""
        - Ref: "AWS::NoValue"
      SecurityGroups:
        Fn::If:
        - "MyAppShouldOpenSSH"
        - - Ref: "MyAppSgDefault"
          - Ref: "MyAppSgSsh"
        - - Ref: "MyAppSgDefault"
      BlockDeviceMappings:
        Fn::If:
        - "MyAppCreateEbsVolume"
        - - DeviceName:
              Fn::Join:
              - "-"
              - - "my-env"
                - "volume"
            Ebs:
              VolumeType: ""
              VolumeSize: 0
        - Ref: "AWS::NoValue"
      UserData:
        Fn::Base64: "#!/bin/bash\necho ECS_CLUSTER=my-env >> /etc/ecs/ecs.config\n"
      ImageId: "ami-83af8395"
      InstanceType: "t2.micro"
  MyAppEcsInstanceAsg:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
      - Fn::Sub: "${MyAppPubSubnetAz1}, ${MyAppPrivSubnetAz2}, ${MyAppPubSubnetAz3},\
          \ ${MyAppPrivSubnetAz4}"
      LaunchConfigurationName:
        Ref: "MyAppEcsInstanceLc"
      MinSize: "0"
      Tags:
      - Key: "Name"
        Value:
          Fn::Join:
          - "-"
          - - "my-env"
            - "ECS"
        PropagateAtLaunch: "true"
      - Key: "Description"
        Value: "This instance was auto created by the cluster where it is running"
        PropagateAtLaunch: "true"
      MaxSize: 1
      DesiredCapacity: 1
  MyAppSgDefault:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName:
        Fn::Join:
        - "-"
        - - "my-env"
          - "Default"
      GroupDescription: "Default SecurityGroup"
      VpcId:
        Ref: "MyAppVpc"
  MyAppSgHttp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName:
        Fn::Join:
        - "-"
        - - "my-env"
          - "HTTP"
      GroupDescription: "SecurityGroup HTTP"
      VpcId:
        Ref: "MyAppVpc"
  MyAppSgHttps:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName:
        Fn::Join:
        - "-"
        - - "my-env"
          - "HTTPS"
      GroupDescription: "SecurityGroup HTTPS"
      VpcId:
        Ref: "MyAppVpc"
  MyAppSgSsh:
    Condition: "MyAppShouldOpenSSH"
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName:
        Fn::Join:
        - "-"
        - - "my-env"
          - "SSH"
      GroupDescription: "SecurityGroup SSH"
      VpcId:
        Ref: "MyAppVpc"
  MyAppSgDefaultIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId:
        Ref: "MyAppSgDefault"
      IpProtocol: "-1"
      FromPort: "-1"
      ToPort: "-1"
      SourceSecurityGroupId:
        Ref: "MyAppSgDefault"
  MyAppSgHttpIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId:
        Ref: "MyAppSgHttp"
      IpProtocol: "tcp"
      FromPort: "80"
      ToPort: "80"
      CidrIp: "0.0.0.0/0"
  MyAppSgHttpsIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId:
        Ref: "MyAppSgHttps"
      IpProtocol: "tcp"
      FromPort: "443"
      ToPort: "443"
      CidrIp: "0.0.0.0/0"
  MyAppSgSshIngress:
    Condition: "MyAppShouldOpenSSH"
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId:
        Ref: "MyAppSgSsh"
      IpProtocol: "tcp"
      FromPort: "22"
      ToPort: "22"
      CidrIp:
        Fn::Join:
        - ""
        - - "192.168.0.1"
          - "/32"
  MyAppLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name:
        Fn::Join:
        - "-"
        - - "my-env"
          - "ALB"
      Scheme: "internet-facing"
      Subnets:
      - Ref: "MyAppPubSubnetAz1"
      - Ref: "MyAppPubSubnetAz3"
      LoadBalancerAttributes:
      - Key: "idle_timeout.timeout_seconds"
        Value: "60"
      SecurityGroups:
      - Ref: "MyAppSgDefault"
      - Ref: "MyAppSgHttp"
      - Ref: "MyAppSgHttps"
  MyAppHttpListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
      - Type: "forward"
        TargetGroupArn:
          Ref: "MyAppTargetGroup"
      LoadBalancerArn:
        Ref: "MyAppLoadBalancer"
      Port: "80"
      Protocol: "HTTP"
  MyAppHttpsListener:
    Condition: "MyAppCreateHTTPSThings"
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
      - Type: "forward"
        TargetGroupArn:
          Ref: "MyAppTargetGroup"
      LoadBalancerArn:
        Ref: "MyAppLoadBalancer"
      Port: "443"
      Protocol: "HTTPS"
      Certificates:
      - Ref: "MyAppCertificateHttp"
  MyAppTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name:
        Fn::Join:
        - "-"
        - - "my-env"
          - "TG"
      Port: 80
      Protocol: "HTTP"
      UnhealthyThresholdCount: 4
      TargetGroupAttributes:
      - Key: "deregistration_delay.timeout_seconds"
        Value: "20"
      VpcId:
        Ref: "MyAppVpc"
      Tags:
      - Key: "Environment"
        Value: "my-env"
  MyAppCertificateHttp:
    Condition: "MyAppCreateHTTPSThings"
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName:
        Fn::If:
        - "MyAppShouldUseEnvironmentOnHost"
        - Fn::Join:
          - "."
          - - "my-env"
            - "test.com"
        - "test.com"
      DomainValidationOptions:
      - DomainName:
          Fn::If:
          - "MyAppShouldUseEnvironmentOnHost"
          - Fn::Join:
            - "."
            - - "my-env"
              - "test.com"
          - "test.com"
        ValidationDomain:
          Fn::If:
          - "MyAppShouldUseEnvironmentOnHost"
          - Fn::Join:
            - "."
            - - "my-env"
              - "test.com"
          - "test.com"
  MyAppCertificateDistribution:
    Condition: "MyAppCreateHTTPSThings"
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn:
            Ref: "MyAppCertificateHttp"
          SslSupportMethod: "sni-only"
        Aliases: "test.com"
  MyAppDBSubnet:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet to database"
      SubnetIds:
      - Ref: "MyAppPubSubnetAz1"
      - Ref: "MyAppPrivSubnetAz2"
      - Ref: "MyAppPubSubnetAz3"
      - Ref: "MyAppPrivSubnetAz4"
      Tags:
      - Key: "Name"
        Value:
          Fn::Join:
          - "-"
          - - "my-env"
            - "DB"
            - "Subnet"
  MyAppDNSPublico:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "Hosted zone publico"
      Name:
        Fn::If:
        - "MyAppShouldUseEnvironmentOnHost"
        - Fn::Join:
          - "."
          - - "my-env"
            - "test.com"
        - "test.com"
      HostedZoneTags:
      - Key: "Environment"
        Value: "my-env"
  MyAppDNSPrivado:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "Hosted zone privado"
      Name:
        Fn::If:
        - "MyAppShouldUseEnvironmentOnHost"
        - Fn::Join:
          - "."
          - - "internal"
            - "my-env"
            - "test.com"
        - Fn::Join:
          - "."
          - - "internal"
            - "test.com"
      VPCs:
      - VPCId:
          Ref: "MyAppVpc"
        VPCRegion:
          Ref: "AWS::Region"
      HostedZoneTags:
      - Key: "Environment"
        Value: "my-env"
  MyAppDNSRecordAlbPublico:
    Type: "AWS::Route53::RecordSet"
    DependsOn: "MyAppLoadBalancer"
    Properties:
      HostedZoneId:
        Ref: "MyAppDNSPublico"
      Comment: "DNS publico para uso das applications"
      Name:
        Fn::If:
        - "MyAppShouldUseEnvironmentOnHost"
        - Fn::Join:
          - "."
          - - "alb"
            - "my-env"
            - "test.com"
        - Fn::Join:
          - "."
          - - "alb"
            - "test.com"
      Type: "A"
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - "MyAppLoadBalancer"
          - "DNSName"
        EvaluateTargetHealth: false
        HostedZoneId:
          Fn::GetAtt:
          - "MyAppLoadBalancer"
          - "CanonicalHostedZoneID"
  MyAppDNSRecordAlbPrivado:
    Type: "AWS::Route53::RecordSet"
    DependsOn: "MyAppLoadBalancer"
    Properties:
      HostedZoneId:
        Ref: "MyAppDNSPrivado"
      Comment: "DNS privado para uso das applications"
      Name:
        Fn::If:
        - "MyAppShouldUseEnvironmentOnHost"
        - Fn::Join:
          - "."
          - - "alb"
            - "internal"
            - "my-env"
            - "test.com"
        - Fn::Join:
          - "."
          - - "alb"
            - "internal"
            - "test.com"
      Type: "A"
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - "MyAppLoadBalancer"
          - "DNSName"
        EvaluateTargetHealth: false
        HostedZoneId:
          Fn::GetAtt:
          - "MyAppLoadBalancer"
          - "CanonicalHostedZoneID"
  MyAppEmail:
    Type: "AWS::Route53::RecordSet"
    Condition: "MyAppHasMx"
    Properties:
      HostedZoneId:
        Ref: "MyAppDNSPublico"
      Comment: "Email MX configuration"
      Name:
        Fn::If:
        - "MyAppShouldUseEnvironmentOnHost"
        - Fn::Join:
          - "."
          - - "my-env"
            - "test.com"
        - "test.com"
      Type: "MX"
      TTL: "900"
      ResourceRecords:
      - ""
  MyAppMysqlParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Description: "CloudFormation Parameter Group for MySql - lower case para mysql,\
        \ utf8 e innodb large"
      Family: "mysql5.6"
      Parameters:
        lower_case_table_names: "1"
        character_set_server: "utf8"
        innodb_large_prefix: "1"
      Tags:
      - Key: "Name"
        Value:
          Fn::Join:
          - "-"
          - - "my-env"
            - "lctn"
      - Key: "Environment"
        Value: "my-env"
Outputs:
  MyAppEcsInstanceAsgName:
    Description: "Auto Scaling Group Name for ECS Instances"
    Value:
      Ref: "MyAppEcsInstanceAsg"
  MyAppSecuritiesGroups:
    Description: "Securities groups"
    Value:
      Fn::If:
      - "MyAppShouldOpenSSH"
      - "SgDefault,SgHttp,SgHttps,SgSsh"
      - "SgDefault,SgHttp,SgHttps"
  MyAppDomain:
    Description: "Environment domain"
    Value:
      Fn::If:
      - "MyAppShouldUseEnvironmentOnHost"
      - Fn::Join:
        - "."
        - - "my-env"
          - "test.com"
      - "test.com"
Conditions:
  MyAppCreateEC2LCWithKeyPair:
    Fn::Not:
    - Fn::Equals:
      - ""
      - ""
  MyAppCreateEbsVolume:
    Fn::And:
    - Fn::Not:
      - Fn::Equals:
        - 0
        - 0
    - Fn::Not:
      - Fn::Equals:
        - ""
        - ""
  MyAppCreateHTTPSThings:
    Fn::Equals:
    - "false"
    - "true"
  MyAppShouldOpenSSH:
    Fn::Not:
    - Fn::Equals:
      - "192.168.0.1"
      - ""
  MyAppShouldUseEnvironmentOnHost:
    Fn::Equals:
    - "true"
    - "true"
  MyAppHasMx:
    Fn::Not:
    - Fn::Equals:
      - Fn::Join:
        - ""
        - - ""
      - ""

